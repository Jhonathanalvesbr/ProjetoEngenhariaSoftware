/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetoengenhariasoftware;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aluno
 */
public class AdmTelaCriarCertificado extends javax.swing.JInternalFrame {

    int checkEditar = 0;
    BancoDados conexao;

    public AdmTelaCriarCertificado(BancoDados conexao) {
        initComponents();
        this.conexao = conexao;
    }

    public int getCheckEditar() {
        return checkEditar;
    }

    public void setCheckEditar(int checkEditar) {

        this.checkEditar = checkEditar;
    }

    /**
     * Creates new form NewJInternalFrame
     */
    public AdmTelaCriarCertificado() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblInicial = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jLblInicial.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLblInicial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLblInicial.setText("Cadastro de Modalidade");

        jPanel2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel2FocusLost(evt);
            }
        });

        jLabel2.setText("Numero maximo de horas permitidas:");

        jLabel3.setText("Obervação:");

        jLabel1.setText("Nome da modalidade:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton5.setText("Buscar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("Buscar modalidade:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Nome da Modalidade", "Numero de Horas Máxima Permitida", "Observação"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Editar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Remover");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Salvar");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jButton6)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addGap(6, 10, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton3, jButton6, jButton7});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton3, jButton6, jButton7});

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Sair");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5)
                                .addGap(1, 1, 1)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(18, 18, 18))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton2, jButton4});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton2, jButton4});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLblInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLblInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextField3.setText("");
        jTextField4.setText("");
        jTextArea1.setText("");
        jTextField1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed
    private static String primeiraLetraM(String s) {
        if (s != null && s != "") {
            s = s.toLowerCase();
            s = s.substring(0, 1).toUpperCase().concat(s.substring(1));
        }

        return s;
    }

    private void sair() {
        dispose();
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        sair();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            ResultSet dados = null;
            String nomeModalidade = jTextField3.getText();
            String numeroHoras = jTextField4.getText();
            String observacao = jTextArea1.getText();

            if (!nomeModalidade.equals("")) {
                nomeModalidade = primeiraLetraM(nomeModalidade);
            }
            if (!numeroHoras.equals("")) {
                numeroHoras = primeiraLetraM(numeroHoras);
            }
            if (!observacao.equals("")) {
                observacao = primeiraLetraM(observacao);
            }

            dados = conexao.getModalidade();

            int selecao = jTable1.getSelectedRow();
            int checkEditar = getCheckEditar();

            if (nomeModalidade.equals("") || numeroHoras.equals("")) {
                JOptionPane.showMessageDialog(null, "Existem campos vazios");
            } else if (selecao >= 0 && checkEditar == 1 && dados.first()) {

                if (jTable1.getRowCount() > 1 && jTable1.getValueAt(selecao, 0) != null
                        && !jTable1.getValueAt(selecao, 0).equals(nomeModalidade)
                        || !jTable1.getValueAt(selecao, 1).equals(numeroHoras)
                        || !jTable1.getValueAt(selecao, 2).equals(observacao)) {

                    conexao.updateModalidade(((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0)), nomeModalidade, numeroHoras, observacao);

                    jTable1.setValueAt(nomeModalidade, jTable1.getSelectedRow(), 0);
                    jTable1.setValueAt(numeroHoras, jTable1.getSelectedRow(), 1);
                    jTable1.setValueAt(observacao, jTable1.getSelectedRow(), 2);
                    jTable1.clearSelection();
                    JOptionPane.showMessageDialog(this, "Sua modalidade foi alterada!");

                }
            } else {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                selecao = model.getRowCount();

                boolean verifica = true;
                if (selecao >= 2) {
                    for (int i = 0; i < model.getRowCount()-1; i++) {
                        if (model.getValueAt(i, 0).equals(nomeModalidade)) {
                            verifica = false;
                            JOptionPane.showMessageDialog(this, "Sua modalidade já existe!");
                            break;
                        }
                    }
                }
                if (dados.first()) {
                    do {
                        if (nomeModalidade.toLowerCase().equals((dados.getString("nomeModalidade").toLowerCase()))) {
                            verifica = false;
                            JOptionPane.showMessageDialog(this, "Sua modalidade já existe!");
                            break;
                        }
                    } while (dados.next());
                }
                if (verifica == true && checkEditar == 0) {
                    
                    model.fireTableCellUpdated(model.getRowCount() - 1, model.getColumnCount() - 1);

                    model.setValueAt(nomeModalidade, model.getRowCount() - 1, 0);
                    model.setValueAt(numeroHoras, model.getRowCount() - 1, 1);
                    model.setValueAt(observacao, model.getRowCount() - 1, 2);
                    
                    Vector row = new Vector();
                    row.add("");
                    model.addRow(row);
                    
                    JOptionPane.showMessageDialog(this, "Sua modalidade foi criada com sucesso!");
                    conexao.setModalidade(nomeModalidade, numeroHoras, observacao);
                    
                }

            }
            setCheckEditar(0);
            dados.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdmTelaCriarCertificado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int i = jTable1.getSelectedRow();
        if (i > -1) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            jTextField3.setText((String) model.getValueAt(jTable1.getSelectedRow(), 0));
            jTextField4.setText((String) model.getValueAt(jTable1.getSelectedRow(), 1));
            jTextArea1.setText((String) model.getValueAt(jTable1.getSelectedRow(), 2));
            setCheckEditar(1);
            jButton7.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um campo para editar!");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1FocusLost

    private void jPanel2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel2FocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel2FocusLost

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1AncestorAdded

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setColumnSelectionInterval(0, 2);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        ResultSet dados;

        String busca = jTextField1.getText();
        List<Modalidade> item = new ArrayList<>();

        dados = conexao.getBusca(busca);
        try {
            if (dados.first()) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setNumRows(1);
                int i = model.getRowCount();

                for (int x = 1; x < i; x++) {
                    model.removeRow(i);
                }

                int x = 0;
                do {
                    Modalidade temp = new Modalidade();
                    temp.setNomeModalidade(dados.getString("nomeModalidade"));
                    temp.setNumeroHoraMaxima(dados.getString("numeroHoraMaxima"));
                    temp.setObservacao(dados.getString("observacao"));
                    item.add(x++, temp);

                } while (dados.next());

                Comparator meuComparator = new Comparator() {
                    public int compare(Object o1, Object o2) {
                        Modalidade m1 = (Modalidade) o1;
                        Modalidade m2 = (Modalidade) o2;
                        return m1.getNomeModalidade().compareTo(m2.getNomeModalidade());
                    }
                };
                Collections.sort(item, meuComparator);

                for (int j = 0; j < item.size(); j++) {
                    model.setValueAt(item.get(j).getNomeModalidade(), model.getRowCount() - 1, 0);
                    model.setValueAt(item.get(j).getNumeroHoraMaxima(), model.getRowCount() - 1, 1);
                    model.setValueAt(item.get(j).getObservacao(), model.getRowCount() - 1, 2);
                    model.addRow(new Vector());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Não existe essa modalidade!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdmTelaCriarCertificado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int b = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir?", title, JOptionPane.YES_NO_OPTION);
        if(b == 0){
            int i = jTable1.getSelectedRow();
            if (i > -1) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                String nomeModalidade =((String) model.getValueAt(jTable1.getSelectedRow(), 0));
                conexao.deleteModalidade(nomeModalidade);
                model.removeRow(i);
                JOptionPane.showMessageDialog(this, "Modalidade foi excluida com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um campo para excluir!");
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        jButton7.setEnabled(false);
                try {
            // TODO add your handling code here:
            ResultSet dados = null;
            String nomeModalidade = jTextField3.getText();
            String numeroHoras = jTextField4.getText();
            String observacao = jTextArea1.getText();

            if (!nomeModalidade.equals("")) {
                nomeModalidade = primeiraLetraM(nomeModalidade);
            }
            if (!numeroHoras.equals("")) {
                numeroHoras = primeiraLetraM(numeroHoras);
            }
            if (!observacao.equals("")) {
                observacao = primeiraLetraM(observacao);
            }

            dados = conexao.getModalidade();

            int selecao = jTable1.getSelectedRow();
            int checkEditar = getCheckEditar();

            if (nomeModalidade.equals("") || numeroHoras.equals("")) {
                JOptionPane.showMessageDialog(null, "Existem campos vazios");
            } else if (selecao >= 0 && checkEditar == 1 && dados.first()) {

                if (jTable1.getRowCount() > 1 && jTable1.getValueAt(selecao, 0) != null
                        && !jTable1.getValueAt(selecao, 0).equals(nomeModalidade)
                        || !jTable1.getValueAt(selecao, 1).equals(numeroHoras)
                        || !jTable1.getValueAt(selecao, 2).equals(observacao)) {

                    conexao.updateModalidade(((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0)), nomeModalidade, numeroHoras, observacao);

                    jTable1.setValueAt(nomeModalidade, jTable1.getSelectedRow(), 0);
                    jTable1.setValueAt(numeroHoras, jTable1.getSelectedRow(), 1);
                    jTable1.setValueAt(observacao, jTable1.getSelectedRow(), 2);
                    jTable1.clearSelection();
                    JOptionPane.showMessageDialog(this, "Sua modalidade foi alterada!");

                }
            } else {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                selecao = model.getRowCount();

                boolean verifica = true;
                if (selecao >= 2) {
                    for (int i = 0; i < model.getRowCount(); i++) {
                        if (this.jTable1.getValueAt(i, 0).equals(nomeModalidade)) {
                            verifica = false;
                            JOptionPane.showMessageDialog(this, "Sua modalidade já existe!");
                            break;
                        }
                    }
                }
                if (dados.first()) {
                    do {
                        if (nomeModalidade.toLowerCase().equals((dados.getString("nomeModalidade").toLowerCase()))) {
                            verifica = false;
                            JOptionPane.showMessageDialog(this, "Sua modalidade já existe!");
                            break;
                        }
                    } while (dados.next());
                }
                if (verifica == true && checkEditar == 0) {
                    Vector row = new Vector();
                    row.add("");
                    row.add("");
                    row.add("");
                    model.addRow(row);
                    
                    model.fireTableCellUpdated(model.getRowCount() - 1, model.getColumnCount() - 1);

                    model.setValueAt(nomeModalidade, model.getRowCount() - 1, 0);
                    model.setValueAt(numeroHoras, model.getRowCount() - 1, 1);
                    model.setValueAt(observacao, model.getRowCount() - 1, 2);
                    JOptionPane.showMessageDialog(this, "Sua modalidade foi criada com sucesso!");
                    conexao.setModalidade(nomeModalidade, numeroHoras, observacao);
                    
                }

            }
            setCheckEditar(0);
            dados.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdmTelaCriarCertificado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed
////

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLblInicial;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
